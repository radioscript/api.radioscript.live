services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: radio-script-postgres
    restart: unless-stopped
    environment:
        POSTGRES_DB: ${DATABASE_NAME:-radioscript}
        POSTGRES_HOST: ${DATABASE_HOST:-postgres}
        POSTGRES_USER: ${DATABASE_USER:-postgres}
        POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-123456}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - radio-script-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: radio-script-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-12345678}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-12345678}
      --appendonly yes
      --protected-mode yes
    ports:
      - "${REDIS_PORT:-6379}:6379"  
    volumes:
      - redis_data:/data
    networks:
      - radio-script-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "12345678", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Radio Script Application
  radio-script:
    build:
      context: ../..
      dockerfile: apps/radio-script/Dockerfile
    container_name: radio-script-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3001}:3001"
    env_file:
      - .env
    environment:
      # Override database connection for Docker networking
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-radioscript}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-123456}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-12345678}
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - radio-script-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  radio-script-network:
    driver: bridge
