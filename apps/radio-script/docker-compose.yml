services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: radio-script-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-radioscript}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - radio-script-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Radio Script Application
  radio-script:
    build:
      context: ../..
      dockerfile: apps/radio-script/Dockerfile
    container_name: radio-script-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3001}:3001"
    environment:
      # App Configuration
      NODE_ENV: ${NODE_ENV:-development}
      APP_PORT: ${APP_PORT:-3001}
      APP_NAME: ${APP_NAME:-Radio Script API}
      APP_DEFAULT_LANG: ${APP_DEFAULT_LANG:-en}
      APP_ALLOW_ORIGINS: ${APP_ALLOW_ORIGINS:-*}
      APP_DOMAIN_WILDCARD: ${APP_DOMAIN_WILDCARD:-*}
      APP_SWAGGER_PASSWORD: ${APP_SWAGGER_PASSWORD:-admin}
      
      # Database Configuration
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-radioscript}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-password}
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      
      # Encryption
      ENCRYPT_SECRET_KEY: ${ENCRYPT_SECRET_KEY:-your-encryption-secret-key}
      
      # S3 Configuration (optional)
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-}
      S3_ENDPOINT: ${S3_ENDPOINT:-}
      
      # SMTP Configuration (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      GMAIL_USER: ${GMAIL_USER:-}
      GMAIL_PASSWORD: ${GMAIL_PASSWORD:-}
      
      # OAuth Configuration (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_AUTH_CALLBACK_URL: ${GOOGLE_AUTH_CALLBACK_URL:-}
      GH_CLIENT_ID: ${GH_CLIENT_ID:-}
      GH_CLIENT_SECRET: ${GH_CLIENT_SECRET:-}
      GH_AUTH_CALLBACK_URL: ${GH_AUTH_CALLBACK_URL:-}
      SOCIAL_AUTH_FRONT_END_CALLBACK_URL: ${SOCIAL_AUTH_FRONT_END_CALLBACK_URL:-}
      
      # SMS Configuration (optional)
      SMS_SERVICE_ENDPOINT: ${SMS_SERVICE_ENDPOINT:-}
      SMS_SERVICE_TOKEN: ${SMS_SERVICE_TOKEN:-}
      SMS_SERVICE_BODY_ID: ${SMS_SERVICE_BODY_ID:-}
      
      # Server Configuration (optional)
      SERVER_IP: ${SERVER_IP:-}
      SERVER_USERNAME: ${SERVER_USERNAME:-}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - radio-script-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  radio-script-network:
    driver: bridge 